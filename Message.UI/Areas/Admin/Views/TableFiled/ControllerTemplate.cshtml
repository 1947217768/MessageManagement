@using Message.Entity.Mapping
@using Message.Entity.ViewEntity.TableFiled;
@model DataTable;
@{
    string sServiceName = "_" + Model.StableName.Substring(0, 1).ToLower() + Model.StableName.Substring(1);
}
using Message.Entity.ViewEntity.<var>@Model.StableName</var>;
using Message.Core.Models;
using Message.Entity.Mapping;
using Message.IService;
using Message.UI.Models;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;

namespace Message.UI.Areas.Admin.Controllers
{
    public class <var>@Model.StableName</var>Controller : BaseAdminController
    {
    private readonly I<var>@Model.StableName</var>Service <var>sServiceName</var>Service;

    public <var>@Model.StableName</var>Controller(I<var>@Model.StableName</var>Service <var>@(Model.StableName.Substring(0, 1).ToLower() + Model.StableName.Substring(1))</var>Service)
    {
    <var>@sServiceName</var>Service = <var>@(Model.StableName.Substring(0, 1).ToLower() + Model.StableName.Substring(1))</var>Service;
    }
    public string LoadData(PageInfo<<var>@Model.StableName</var>>pageInfo, <var>@Model.StableName</var> oSearchEntity = null, string sOperator = null, int iOrderGroup = 0, string sSortName = null, string sSortOrder = null)
    {
    return JsonHelper.ObjectToJSON(<var>@sServiceName</var>Service.GetPageList(pageInfo, oSearchEntity, sOperator, iOrderGroup, sSortName, sSortOrder));
    }
    public IActionResult Index(int iPageId)
    {
    return List(iPageId);
    }
    public IActionResult AddOrModify(int iPageId)
    {
    return Edit(iPageId);
    }
    [HttpPost]
    [ValidateAntiForgeryToken]
    [CrossSiteScript]
    public async Task<string>
        AddOrModifyAsync([FromForm]AddOrModify<var>@Model.StableName</var> model)
        {
        BaseResult baseResult = new BaseResult();
        try
        {
        if (model != null)
        {
        //验证规则  Validation
        //if (!string.IsNullOrWhiteSpace(model.StypeName))
        //{
        if (await <var>@sServiceName</var>Service.AddOrModify<var>@Model.StableName</var>Async(model, User.Identity.Name) != null)
        {
        baseResult.Code = 0;
        baseResult.Msg = "操作成功!";
        }
        else
        {
        baseResult.Code = 1;
        baseResult.Msg = "操作失败!";
        }
        //}
        }
        }
        catch (Exception ex)
        {
        baseResult.Code = 3;
        baseResult.Msg = ex.Message;
        }
        return JsonHelper.ObjectToJSON(baseResult);
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public string DeleteRange(int[] arrId)
        {
        BaseResult baseResult = new BaseResult();
        if (<var>@sServiceName</var>Service.DeleteRange(arrId, User.Identity.Name))
        {
        baseResult.Code = 0;
        baseResult.Msg = "删除成功!";
        }
        else
        {
        baseResult.Code = 1;
        baseResult.Msg = "删除失败!";
        }
        return JsonHelper.ObjectToJSON(baseResult);
        }
        }
        }
